"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fumadocs-core";
exports.ids = ["vendor-chunks/fumadocs-core"];
exports.modules = {

/***/ "(rsc)/./node_modules/fumadocs-core/dist/chunk-MLKGABMK.js":
/*!***********************************************************!*\
  !*** ./node_modules/fumadocs-core/dist/chunk-MLKGABMK.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __export: () => (/* binding */ __export)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnVtYWRvY3MtY29yZS9kaXN0L2NodW5rLU1MS0dBQk1LLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDO0FBQ2hFOztBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2hhZGNuLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9mdW1hZG9jcy1jb3JlL2Rpc3QvY2h1bmstTUxLR0FCTUsuanM/ODA2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG5leHBvcnQge1xuICBfX2V4cG9ydFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fumadocs-core/dist/chunk-MLKGABMK.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fumadocs-core/dist/chunk-UWEEHUJV.js":
/*!***********************************************************!*\
  !*** ./node_modules/fumadocs-core/dist/chunk-UWEEHUJV.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   slash: () => (/* binding */ slash)\n/* harmony export */ });\n// src/utils/slash.ts\nfunction slash(path) {\n  const isExtendedLengthPath = path.startsWith(\"\\\\\\\\?\\\\\");\n  if (isExtendedLengthPath) {\n    return path;\n  }\n  return path.replaceAll(\"\\\\\", \"/\");\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnVtYWRvY3MtY29yZS9kaXN0L2NodW5rLVVXRUVIVUpWLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2hhZGNuLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9mdW1hZG9jcy1jb3JlL2Rpc3QvY2h1bmstVVdFRUhVSlYuanM/NTI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvc2xhc2gudHNcbmZ1bmN0aW9uIHNsYXNoKHBhdGgpIHtcbiAgY29uc3QgaXNFeHRlbmRlZExlbmd0aFBhdGggPSBwYXRoLnN0YXJ0c1dpdGgoXCJcXFxcXFxcXD9cXFxcXCIpO1xuICBpZiAoaXNFeHRlbmRlZExlbmd0aFBhdGgpIHtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxuICByZXR1cm4gcGF0aC5yZXBsYWNlQWxsKFwiXFxcXFwiLCBcIi9cIik7XG59XG5cbmV4cG9ydCB7XG4gIHNsYXNoXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fumadocs-core/dist/chunk-UWEEHUJV.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/fumadocs-core/dist/source/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/fumadocs-core/dist/source/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileSystem: () => (/* binding */ file_system_exports),\n/* harmony export */   createGetUrl: () => (/* binding */ createGetUrl),\n/* harmony export */   createPageTreeBuilder: () => (/* binding */ createPageTreeBuilder),\n/* harmony export */   getSlugs: () => (/* binding */ getSlugs),\n/* harmony export */   loadFiles: () => (/* binding */ loadFiles),\n/* harmony export */   loader: () => (/* binding */ loader),\n/* harmony export */   parseFilePath: () => (/* binding */ parseFilePath),\n/* harmony export */   parseFolderPath: () => (/* binding */ parseFolderPath)\n/* harmony export */ });\n/* harmony import */ var _chunk_UWEEHUJV_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunk-UWEEHUJV.js */ \"(rsc)/./node_modules/fumadocs-core/dist/chunk-UWEEHUJV.js\");\n/* harmony import */ var _chunk_MLKGABMK_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunk-MLKGABMK.js */ \"(rsc)/./node_modules/fumadocs-core/dist/chunk-MLKGABMK.js\");\n\n\n\n// src/source/path.ts\nfunction parseFilePath(path) {\n  const segments = splitPath((0,_chunk_UWEEHUJV_js__WEBPACK_IMPORTED_MODULE_0__.slash)(path));\n  const dirname = segments.slice(0, -1).join(\"/\");\n  const base = segments.at(-1) ?? \"\";\n  const dotIdx = base.lastIndexOf(\".\");\n  const nameWithLocale = dotIdx !== -1 ? base.slice(0, dotIdx) : base;\n  const flattenedPath = [dirname, nameWithLocale].filter((p) => p.length > 0).join(\"/\");\n  const [name, locale] = getLocale(nameWithLocale);\n  return {\n    dirname,\n    name,\n    flattenedPath,\n    locale,\n    path: segments.join(\"/\")\n  };\n}\nfunction parseFolderPath(path) {\n  const segments = splitPath((0,_chunk_UWEEHUJV_js__WEBPACK_IMPORTED_MODULE_0__.slash)(path));\n  const base = segments.at(-1) ?? \"\";\n  const [name, locale] = getLocale(base);\n  const flattenedPath = segments.join(\"/\");\n  return {\n    dirname: segments.slice(0, -1).join(\"/\"),\n    name,\n    flattenedPath,\n    locale,\n    path: flattenedPath\n  };\n}\nfunction getLocale(name) {\n  const sep = name.lastIndexOf(\".\");\n  if (sep === -1) return [name];\n  const locale = name.slice(sep + 1);\n  if (/\\d+/.exec(locale)) return [name];\n  return [name.slice(0, sep), locale];\n}\nfunction normalizePath(path) {\n  const segments = splitPath((0,_chunk_UWEEHUJV_js__WEBPACK_IMPORTED_MODULE_0__.slash)(path));\n  if (segments[0] === \".\" || segments[0] === \"..\")\n    throw new Error(\"It must not start with './' or '../'\");\n  return segments.join(\"/\");\n}\nfunction splitPath(path) {\n  return path.split(\"/\").filter((p) => p.length > 0);\n}\nfunction resolvePath(from, join) {\n  const v1 = splitPath(from), v2 = splitPath(join);\n  while (v2.length > 0) {\n    switch (v2[0]) {\n      case \"..\":\n        v1.pop();\n        break;\n      case \".\":\n        break;\n      default:\n        v1.push(v2[0]);\n    }\n    v2.shift();\n  }\n  return v1.join(\"/\");\n}\n\n// src/source/page-tree-builder.ts\nvar group = /^\\((?<name>.+)\\)$/;\nvar link = /^(?:\\[(?<icon>[^\\]]+)])?\\[(?<name>[^\\]]+)]\\((?<url>[^)]+)\\)$/;\nvar separator = /^---(?<name>.*?)---$/;\nvar rest = \"...\";\nvar extractPrefix = \"...\";\nvar excludePrefix = \"!\";\nfunction buildAll(nodes, ctx, skipIndex) {\n  const output = [];\n  const folders = [];\n  for (const node of [...nodes].sort(\n    (a, b) => a.file.name.localeCompare(b.file.name)\n  )) {\n    if (\"data\" in node && node.format === \"page\" && !node.file.locale) {\n      const treeNode = buildFileNode(node, ctx);\n      if (node.file.name === \"index\") {\n        if (!skipIndex) output.unshift(treeNode);\n        continue;\n      }\n      output.push(treeNode);\n    }\n    if (\"children\" in node) {\n      folders.push(buildFolderNode(node, false, ctx));\n    }\n  }\n  output.push(...folders);\n  return output;\n}\nfunction resolveFolderItem(folder, item, ctx, addedNodePaths) {\n  if (item === rest) return \"...\";\n  const separateResult = separator.exec(item);\n  if (separateResult?.groups) {\n    const node = {\n      type: \"separator\",\n      name: separateResult.groups.name\n    };\n    return [ctx.options.attachSeparator?.(node) ?? node];\n  }\n  const linkResult = link.exec(item);\n  if (linkResult?.groups) {\n    const { icon, url, name } = linkResult.groups;\n    const isRelative = url.startsWith(\"/\") || url.startsWith(\"#\") || url.startsWith(\".\");\n    const node = {\n      type: \"page\",\n      icon: ctx.options.resolveIcon?.(icon),\n      name,\n      url,\n      external: !isRelative\n    };\n    return [removeUndefined(ctx.options.attachFile?.(node) ?? node)];\n  }\n  const isExcept = item.startsWith(excludePrefix), isExtract = item.startsWith(extractPrefix);\n  let filename = item;\n  if (isExcept) {\n    filename = item.slice(excludePrefix.length);\n  } else if (isExtract) {\n    filename = item.slice(extractPrefix.length);\n  }\n  const path = resolvePath(folder.file.path, filename);\n  const itemNode = ctx.storage.readDir(path) ?? ctx.storage.read(path, \"page\");\n  if (!itemNode) return [];\n  addedNodePaths.add(itemNode.file.path);\n  if (isExcept) return [];\n  if (\"children\" in itemNode) {\n    const node = buildFolderNode(itemNode, false, ctx);\n    return isExtract ? node.children : [node];\n  }\n  return [buildFileNode(itemNode, ctx)];\n}\nfunction buildFolderNode(folder, isGlobalRoot, ctx) {\n  const metaPath = resolvePath(folder.file.path, \"meta\");\n  let meta = ctx.storage.read(metaPath, \"meta\");\n  meta = findLocalizedFile(metaPath, \"meta\", ctx) ?? meta;\n  const indexFile = ctx.storage.read(\n    resolvePath(folder.file.flattenedPath, \"index\"),\n    \"page\"\n  );\n  const metadata = meta?.data.data;\n  const index = indexFile ? buildFileNode(indexFile, ctx) : void 0;\n  let children;\n  if (!meta) {\n    children = buildAll(folder.children, ctx, !isGlobalRoot);\n  } else {\n    const isRoot = metadata?.root ?? isGlobalRoot;\n    const addedNodePaths = /* @__PURE__ */ new Set();\n    const resolved = metadata?.pages?.flatMap((item) => {\n      return resolveFolderItem(folder, item, ctx, addedNodePaths);\n    });\n    const restNodes = buildAll(\n      folder.children.filter((node2) => !addedNodePaths.has(node2.file.path)),\n      ctx,\n      !isRoot\n    );\n    const nodes = resolved?.flatMap((item) => {\n      if (item === \"...\") {\n        return restNodes;\n      }\n      return item;\n    });\n    children = nodes ?? restNodes;\n  }\n  const node = {\n    type: \"folder\",\n    name: metadata?.title ?? index?.name ?? pathToName(folder.file.name, true),\n    icon: ctx.options.resolveIcon?.(metadata?.icon) ?? index?.icon,\n    root: metadata?.root,\n    defaultOpen: metadata?.defaultOpen,\n    index,\n    children\n  };\n  if (ctx.options.attachFolderIds) {\n    node.id = folder.file.flattenedPath;\n  }\n  return removeUndefined(\n    ctx.options.attachFolder?.(node, folder, meta) ?? node\n  );\n}\nfunction buildFileNode(file, ctx) {\n  let urlLocale;\n  const localized = findLocalizedFile(file.file.flattenedPath, \"page\", ctx) ?? file;\n  const hideLocale = ctx.i18n?.hideLocale ?? \"never\";\n  if (hideLocale === \"never\") {\n    urlLocale = ctx.lang;\n  } else if (hideLocale === \"default-locale\" && ctx.lang !== ctx.i18n?.defaultLanguage) {\n    urlLocale = ctx.lang;\n  }\n  const item = {\n    type: \"page\",\n    name: localized.data.data.title,\n    icon: ctx.options.resolveIcon?.(localized.data.data.icon),\n    url: ctx.options.getUrl(localized.data.slugs, urlLocale)\n  };\n  return removeUndefined(ctx.options.attachFile?.(item, file) ?? item);\n}\nfunction build(ctx) {\n  const root = ctx.storage.root();\n  const folder = buildFolderNode(root, true, ctx);\n  return {\n    name: folder.name,\n    children: folder.children\n  };\n}\nfunction createPageTreeBuilder() {\n  return {\n    build(options) {\n      return build({\n        options,\n        builder: this,\n        storage: options.storage\n      });\n    },\n    buildI18n({ i18n, ...options }) {\n      const entries = i18n.languages.map((lang) => {\n        const tree = build({\n          lang,\n          options,\n          builder: this,\n          storage: options.storage,\n          i18n\n        });\n        return [lang, tree];\n      });\n      return Object.fromEntries(entries);\n    }\n  };\n}\nfunction findLocalizedFile(path, format, ctx) {\n  if (!ctx.lang) return;\n  return ctx.storage.read(`${path}.${ctx.lang}`, format);\n}\nfunction pathToName(name, resolveGroup = false) {\n  const resolved = resolveGroup ? group.exec(name)?.[1] ?? name : name;\n  const result = [];\n  for (const c of resolved) {\n    if (result.length === 0) result.push(c.toLocaleUpperCase());\n    else if (c === \"-\") result.push(\" \");\n    else result.push(c);\n  }\n  return result.join(\"\");\n}\nfunction removeUndefined(value) {\n  const obj = value;\n  Object.keys(obj).forEach((key) => {\n    if (obj[key] === void 0) delete obj[key];\n  });\n  return value;\n}\n\n// src/source/file-system.ts\nvar file_system_exports = {};\n(0,_chunk_MLKGABMK_js__WEBPACK_IMPORTED_MODULE_1__.__export)(file_system_exports, {\n  Storage: () => Storage\n});\nvar Storage = class {\n  constructor() {\n    this.files = /* @__PURE__ */ new Map();\n    this.folders = /* @__PURE__ */ new Map();\n    this.rootFolder = {\n      file: parseFolderPath(\"\"),\n      children: []\n    };\n    this.folders.set(\"\", this.rootFolder);\n  }\n  /**\n   * @param path - flattened path\n   * @param format - file format\n   */\n  read(path, format) {\n    return this.files.get(`${path}.${format}`);\n  }\n  readDir(path) {\n    return this.folders.get(path);\n  }\n  root() {\n    return this.rootFolder;\n  }\n  write(path, format, data) {\n    const node = {\n      format,\n      file: parseFilePath(path),\n      data\n    };\n    this.makeDir(node.file.dirname);\n    this.readDir(node.file.dirname)?.children.push(node);\n    this.files.set(`${node.file.flattenedPath}.${node.format}`, node);\n  }\n  list() {\n    return [...this.files.values()];\n  }\n  makeDir(path) {\n    const segments = splitPath(path);\n    for (let i = 0; i < segments.length; i++) {\n      const segment = segments.slice(0, i + 1).join(\"/\");\n      if (this.folders.has(segment)) continue;\n      const folder = {\n        file: parseFolderPath(segment),\n        children: []\n      };\n      this.folders.set(folder.file.path, folder);\n      this.readDir(folder.file.dirname)?.children.push(folder);\n    }\n  }\n};\n\n// src/source/load-files.ts\nfunction loadFiles(files, options) {\n  const { transformers = [] } = options;\n  const storage = new Storage();\n  const rootDir = normalizePath(options.rootDir ?? \"\");\n  for (const file of files) {\n    const normalizedPath = normalizePath(file.path);\n    if (!normalizedPath.startsWith(rootDir)) continue;\n    const relativePath = normalizedPath.slice(rootDir.length);\n    if (file.type === \"page\") {\n      const slugs = file.slugs ?? options.getSlugs(parseFilePath(relativePath));\n      storage.write(relativePath, file.type, {\n        slugs,\n        data: file.data\n      });\n    }\n    if (file.type === \"meta\") {\n      storage.write(relativePath, file.type, {\n        data: file.data\n      });\n    }\n  }\n  for (const transformer of transformers) {\n    transformer({\n      storage,\n      options\n    });\n  }\n  return storage;\n}\n\n// src/source/loader.ts\nfunction buildPageMap(storage, getUrl, languages = []) {\n  const map = /* @__PURE__ */ new Map();\n  const defaultMap = /* @__PURE__ */ new Map();\n  map.set(\"\", defaultMap);\n  for (const file of storage.list()) {\n    if (file.format !== \"page\" || file.file.locale) continue;\n    const page = fileToPage(file, getUrl);\n    defaultMap.set(page.slugs.join(\"/\"), page);\n    for (const lang of languages) {\n      const langMap = map.get(lang) ?? /* @__PURE__ */ new Map();\n      const localized = storage.read(\n        `${file.file.flattenedPath}.${lang}`,\n        \"page\"\n      );\n      const localizedPage = fileToPage(localized ?? file, getUrl, lang);\n      langMap.set(localizedPage.slugs.join(\"/\"), localizedPage);\n      map.set(lang, langMap);\n    }\n  }\n  return map;\n}\nfunction createGetUrl(baseUrl) {\n  return (slugs, locale) => {\n    const paths = locale ? [locale, ...baseUrl.split(\"/\"), ...slugs] : [...baseUrl.split(\"/\"), ...slugs];\n    return `/${paths.filter((v) => v.length > 0).join(\"/\")}`;\n  };\n}\nfunction getSlugs(info) {\n  return [...info.dirname.split(\"/\"), info.name].filter(\n    // filter empty folder names and file groups like (group_name)\n    (v, i, arr) => {\n      if (v.length === 0) return false;\n      return i === arr.length - 1 ? v !== \"index\" : !/^\\(.+\\)$/.test(v);\n    }\n  );\n}\nfunction loader(options) {\n  if (options.languages) {\n    console.warn(\n      \"Fumadocs: It's highly recommended to use `i18n` config instead of passing `languages` to loader.\"\n    );\n    return createOutput({\n      ...options,\n      i18n: {\n        languages: options.languages,\n        defaultLanguage: options.defaultLanguage\n      }\n    });\n  }\n  return createOutput(options);\n}\nfunction createOutput({\n  source,\n  icon: resolveIcon,\n  rootDir = \"\",\n  transformers,\n  baseUrl = \"/\",\n  slugs: slugsFn = getSlugs,\n  url: getUrl = createGetUrl(baseUrl),\n  pageTree: pageTreeOptions = {},\n  i18n\n}) {\n  const storage = loadFiles(\n    typeof source.files === \"function\" ? source.files(rootDir) : source.files,\n    {\n      transformers,\n      rootDir,\n      getSlugs: slugsFn\n    }\n  );\n  const i18nMap = buildPageMap(storage, getUrl, i18n?.languages);\n  const builder = createPageTreeBuilder();\n  const pageTree = i18n === void 0 ? builder.build({\n    storage,\n    resolveIcon,\n    getUrl,\n    ...pageTreeOptions\n  }) : builder.buildI18n({\n    storage,\n    resolveIcon,\n    getUrl,\n    i18n,\n    ...pageTreeOptions\n  });\n  return {\n    pageTree,\n    files: storage.list(),\n    getPages(language = i18n?.defaultLanguage ?? \"\") {\n      return Array.from(i18nMap.get(language)?.values() ?? []);\n    },\n    getLanguages() {\n      const list = [];\n      for (const [language, pages] of i18nMap) {\n        if (language === \"\") continue;\n        list.push({\n          language,\n          pages: Array.from(pages.values())\n        });\n      }\n      return list;\n    },\n    getPage(slugs = [], language = i18n?.defaultLanguage ?? \"\") {\n      return i18nMap.get(language)?.get(slugs.join(\"/\"));\n    },\n    // @ts-expect-error -- ignore this\n    generateParams(slug, lang) {\n      if (i18n) {\n        return this.getLanguages().flatMap(\n          (entry) => entry.pages.map((page) => ({\n            [slug ?? \"slug\"]: page.slugs,\n            [lang ?? \"lang\"]: entry.language\n          }))\n        );\n      }\n      return Array.from(i18nMap.get(\"\")?.values() ?? []).map((page) => ({\n        [slug ?? \"slug\"]: page.slugs\n      }));\n    }\n  };\n}\nfunction fileToPage(file, getUrl, locale) {\n  return {\n    file: file.file,\n    url: getUrl(file.data.slugs, locale),\n    slugs: file.data.slugs,\n    data: file.data.data\n  };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZnVtYWRvY3MtY29yZS9kaXN0L3NvdXJjZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBRThCO0FBR0E7O0FBRTlCO0FBQ0E7QUFDQSw2QkFBNkIseURBQUs7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHlEQUFLO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHlEQUFLO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVVFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2hhZGNuLXBvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9mdW1hZG9jcy1jb3JlL2Rpc3Qvc291cmNlL2luZGV4LmpzPzYxZDUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgc2xhc2hcbn0gZnJvbSBcIi4uL2NodW5rLVVXRUVIVUpWLmpzXCI7XG5pbXBvcnQge1xuICBfX2V4cG9ydFxufSBmcm9tIFwiLi4vY2h1bmstTUxLR0FCTUsuanNcIjtcblxuLy8gc3JjL3NvdXJjZS9wYXRoLnRzXG5mdW5jdGlvbiBwYXJzZUZpbGVQYXRoKHBhdGgpIHtcbiAgY29uc3Qgc2VnbWVudHMgPSBzcGxpdFBhdGgoc2xhc2gocGF0aCkpO1xuICBjb25zdCBkaXJuYW1lID0gc2VnbWVudHMuc2xpY2UoMCwgLTEpLmpvaW4oXCIvXCIpO1xuICBjb25zdCBiYXNlID0gc2VnbWVudHMuYXQoLTEpID8/IFwiXCI7XG4gIGNvbnN0IGRvdElkeCA9IGJhc2UubGFzdEluZGV4T2YoXCIuXCIpO1xuICBjb25zdCBuYW1lV2l0aExvY2FsZSA9IGRvdElkeCAhPT0gLTEgPyBiYXNlLnNsaWNlKDAsIGRvdElkeCkgOiBiYXNlO1xuICBjb25zdCBmbGF0dGVuZWRQYXRoID0gW2Rpcm5hbWUsIG5hbWVXaXRoTG9jYWxlXS5maWx0ZXIoKHApID0+IHAubGVuZ3RoID4gMCkuam9pbihcIi9cIik7XG4gIGNvbnN0IFtuYW1lLCBsb2NhbGVdID0gZ2V0TG9jYWxlKG5hbWVXaXRoTG9jYWxlKTtcbiAgcmV0dXJuIHtcbiAgICBkaXJuYW1lLFxuICAgIG5hbWUsXG4gICAgZmxhdHRlbmVkUGF0aCxcbiAgICBsb2NhbGUsXG4gICAgcGF0aDogc2VnbWVudHMuam9pbihcIi9cIilcbiAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRm9sZGVyUGF0aChwYXRoKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gc3BsaXRQYXRoKHNsYXNoKHBhdGgpKTtcbiAgY29uc3QgYmFzZSA9IHNlZ21lbnRzLmF0KC0xKSA/PyBcIlwiO1xuICBjb25zdCBbbmFtZSwgbG9jYWxlXSA9IGdldExvY2FsZShiYXNlKTtcbiAgY29uc3QgZmxhdHRlbmVkUGF0aCA9IHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xuICByZXR1cm4ge1xuICAgIGRpcm5hbWU6IHNlZ21lbnRzLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKSxcbiAgICBuYW1lLFxuICAgIGZsYXR0ZW5lZFBhdGgsXG4gICAgbG9jYWxlLFxuICAgIHBhdGg6IGZsYXR0ZW5lZFBhdGhcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldExvY2FsZShuYW1lKSB7XG4gIGNvbnN0IHNlcCA9IG5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xuICBpZiAoc2VwID09PSAtMSkgcmV0dXJuIFtuYW1lXTtcbiAgY29uc3QgbG9jYWxlID0gbmFtZS5zbGljZShzZXAgKyAxKTtcbiAgaWYgKC9cXGQrLy5leGVjKGxvY2FsZSkpIHJldHVybiBbbmFtZV07XG4gIHJldHVybiBbbmFtZS5zbGljZSgwLCBzZXApLCBsb2NhbGVdO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoKSB7XG4gIGNvbnN0IHNlZ21lbnRzID0gc3BsaXRQYXRoKHNsYXNoKHBhdGgpKTtcbiAgaWYgKHNlZ21lbnRzWzBdID09PSBcIi5cIiB8fCBzZWdtZW50c1swXSA9PT0gXCIuLlwiKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkl0IG11c3Qgbm90IHN0YXJ0IHdpdGggJy4vJyBvciAnLi4vJ1wiKTtcbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oXCIvXCIpO1xufVxuZnVuY3Rpb24gc3BsaXRQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguc3BsaXQoXCIvXCIpLmZpbHRlcigocCkgPT4gcC5sZW5ndGggPiAwKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKGZyb20sIGpvaW4pIHtcbiAgY29uc3QgdjEgPSBzcGxpdFBhdGgoZnJvbSksIHYyID0gc3BsaXRQYXRoKGpvaW4pO1xuICB3aGlsZSAodjIubGVuZ3RoID4gMCkge1xuICAgIHN3aXRjaCAodjJbMF0pIHtcbiAgICAgIGNhc2UgXCIuLlwiOlxuICAgICAgICB2MS5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLlwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHYxLnB1c2godjJbMF0pO1xuICAgIH1cbiAgICB2Mi5zaGlmdCgpO1xuICB9XG4gIHJldHVybiB2MS5qb2luKFwiL1wiKTtcbn1cblxuLy8gc3JjL3NvdXJjZS9wYWdlLXRyZWUtYnVpbGRlci50c1xudmFyIGdyb3VwID0gL15cXCgoPzxuYW1lPi4rKVxcKSQvO1xudmFyIGxpbmsgPSAvXig/OlxcWyg/PGljb24+W15cXF1dKyldKT9cXFsoPzxuYW1lPlteXFxdXSspXVxcKCg/PHVybD5bXildKylcXCkkLztcbnZhciBzZXBhcmF0b3IgPSAvXi0tLSg/PG5hbWU+Lio/KS0tLSQvO1xudmFyIHJlc3QgPSBcIi4uLlwiO1xudmFyIGV4dHJhY3RQcmVmaXggPSBcIi4uLlwiO1xudmFyIGV4Y2x1ZGVQcmVmaXggPSBcIiFcIjtcbmZ1bmN0aW9uIGJ1aWxkQWxsKG5vZGVzLCBjdHgsIHNraXBJbmRleCkge1xuICBjb25zdCBvdXRwdXQgPSBbXTtcbiAgY29uc3QgZm9sZGVycyA9IFtdO1xuICBmb3IgKGNvbnN0IG5vZGUgb2YgWy4uLm5vZGVzXS5zb3J0KFxuICAgIChhLCBiKSA9PiBhLmZpbGUubmFtZS5sb2NhbGVDb21wYXJlKGIuZmlsZS5uYW1lKVxuICApKSB7XG4gICAgaWYgKFwiZGF0YVwiIGluIG5vZGUgJiYgbm9kZS5mb3JtYXQgPT09IFwicGFnZVwiICYmICFub2RlLmZpbGUubG9jYWxlKSB7XG4gICAgICBjb25zdCB0cmVlTm9kZSA9IGJ1aWxkRmlsZU5vZGUobm9kZSwgY3R4KTtcbiAgICAgIGlmIChub2RlLmZpbGUubmFtZSA9PT0gXCJpbmRleFwiKSB7XG4gICAgICAgIGlmICghc2tpcEluZGV4KSBvdXRwdXQudW5zaGlmdCh0cmVlTm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgb3V0cHV0LnB1c2godHJlZU5vZGUpO1xuICAgIH1cbiAgICBpZiAoXCJjaGlsZHJlblwiIGluIG5vZGUpIHtcbiAgICAgIGZvbGRlcnMucHVzaChidWlsZEZvbGRlck5vZGUobm9kZSwgZmFsc2UsIGN0eCkpO1xuICAgIH1cbiAgfVxuICBvdXRwdXQucHVzaCguLi5mb2xkZXJzKTtcbiAgcmV0dXJuIG91dHB1dDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGb2xkZXJJdGVtKGZvbGRlciwgaXRlbSwgY3R4LCBhZGRlZE5vZGVQYXRocykge1xuICBpZiAoaXRlbSA9PT0gcmVzdCkgcmV0dXJuIFwiLi4uXCI7XG4gIGNvbnN0IHNlcGFyYXRlUmVzdWx0ID0gc2VwYXJhdG9yLmV4ZWMoaXRlbSk7XG4gIGlmIChzZXBhcmF0ZVJlc3VsdD8uZ3JvdXBzKSB7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIHR5cGU6IFwic2VwYXJhdG9yXCIsXG4gICAgICBuYW1lOiBzZXBhcmF0ZVJlc3VsdC5ncm91cHMubmFtZVxuICAgIH07XG4gICAgcmV0dXJuIFtjdHgub3B0aW9ucy5hdHRhY2hTZXBhcmF0b3I/Lihub2RlKSA/PyBub2RlXTtcbiAgfVxuICBjb25zdCBsaW5rUmVzdWx0ID0gbGluay5leGVjKGl0ZW0pO1xuICBpZiAobGlua1Jlc3VsdD8uZ3JvdXBzKSB7XG4gICAgY29uc3QgeyBpY29uLCB1cmwsIG5hbWUgfSA9IGxpbmtSZXN1bHQuZ3JvdXBzO1xuICAgIGNvbnN0IGlzUmVsYXRpdmUgPSB1cmwuc3RhcnRzV2l0aChcIi9cIikgfHwgdXJsLnN0YXJ0c1dpdGgoXCIjXCIpIHx8IHVybC5zdGFydHNXaXRoKFwiLlwiKTtcbiAgICBjb25zdCBub2RlID0ge1xuICAgICAgdHlwZTogXCJwYWdlXCIsXG4gICAgICBpY29uOiBjdHgub3B0aW9ucy5yZXNvbHZlSWNvbj8uKGljb24pLFxuICAgICAgbmFtZSxcbiAgICAgIHVybCxcbiAgICAgIGV4dGVybmFsOiAhaXNSZWxhdGl2ZVxuICAgIH07XG4gICAgcmV0dXJuIFtyZW1vdmVVbmRlZmluZWQoY3R4Lm9wdGlvbnMuYXR0YWNoRmlsZT8uKG5vZGUpID8/IG5vZGUpXTtcbiAgfVxuICBjb25zdCBpc0V4Y2VwdCA9IGl0ZW0uc3RhcnRzV2l0aChleGNsdWRlUHJlZml4KSwgaXNFeHRyYWN0ID0gaXRlbS5zdGFydHNXaXRoKGV4dHJhY3RQcmVmaXgpO1xuICBsZXQgZmlsZW5hbWUgPSBpdGVtO1xuICBpZiAoaXNFeGNlcHQpIHtcbiAgICBmaWxlbmFtZSA9IGl0ZW0uc2xpY2UoZXhjbHVkZVByZWZpeC5sZW5ndGgpO1xuICB9IGVsc2UgaWYgKGlzRXh0cmFjdCkge1xuICAgIGZpbGVuYW1lID0gaXRlbS5zbGljZShleHRyYWN0UHJlZml4Lmxlbmd0aCk7XG4gIH1cbiAgY29uc3QgcGF0aCA9IHJlc29sdmVQYXRoKGZvbGRlci5maWxlLnBhdGgsIGZpbGVuYW1lKTtcbiAgY29uc3QgaXRlbU5vZGUgPSBjdHguc3RvcmFnZS5yZWFkRGlyKHBhdGgpID8/IGN0eC5zdG9yYWdlLnJlYWQocGF0aCwgXCJwYWdlXCIpO1xuICBpZiAoIWl0ZW1Ob2RlKSByZXR1cm4gW107XG4gIGFkZGVkTm9kZVBhdGhzLmFkZChpdGVtTm9kZS5maWxlLnBhdGgpO1xuICBpZiAoaXNFeGNlcHQpIHJldHVybiBbXTtcbiAgaWYgKFwiY2hpbGRyZW5cIiBpbiBpdGVtTm9kZSkge1xuICAgIGNvbnN0IG5vZGUgPSBidWlsZEZvbGRlck5vZGUoaXRlbU5vZGUsIGZhbHNlLCBjdHgpO1xuICAgIHJldHVybiBpc0V4dHJhY3QgPyBub2RlLmNoaWxkcmVuIDogW25vZGVdO1xuICB9XG4gIHJldHVybiBbYnVpbGRGaWxlTm9kZShpdGVtTm9kZSwgY3R4KV07XG59XG5mdW5jdGlvbiBidWlsZEZvbGRlck5vZGUoZm9sZGVyLCBpc0dsb2JhbFJvb3QsIGN0eCkge1xuICBjb25zdCBtZXRhUGF0aCA9IHJlc29sdmVQYXRoKGZvbGRlci5maWxlLnBhdGgsIFwibWV0YVwiKTtcbiAgbGV0IG1ldGEgPSBjdHguc3RvcmFnZS5yZWFkKG1ldGFQYXRoLCBcIm1ldGFcIik7XG4gIG1ldGEgPSBmaW5kTG9jYWxpemVkRmlsZShtZXRhUGF0aCwgXCJtZXRhXCIsIGN0eCkgPz8gbWV0YTtcbiAgY29uc3QgaW5kZXhGaWxlID0gY3R4LnN0b3JhZ2UucmVhZChcbiAgICByZXNvbHZlUGF0aChmb2xkZXIuZmlsZS5mbGF0dGVuZWRQYXRoLCBcImluZGV4XCIpLFxuICAgIFwicGFnZVwiXG4gICk7XG4gIGNvbnN0IG1ldGFkYXRhID0gbWV0YT8uZGF0YS5kYXRhO1xuICBjb25zdCBpbmRleCA9IGluZGV4RmlsZSA/IGJ1aWxkRmlsZU5vZGUoaW5kZXhGaWxlLCBjdHgpIDogdm9pZCAwO1xuICBsZXQgY2hpbGRyZW47XG4gIGlmICghbWV0YSkge1xuICAgIGNoaWxkcmVuID0gYnVpbGRBbGwoZm9sZGVyLmNoaWxkcmVuLCBjdHgsICFpc0dsb2JhbFJvb3QpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGlzUm9vdCA9IG1ldGFkYXRhPy5yb290ID8/IGlzR2xvYmFsUm9vdDtcbiAgICBjb25zdCBhZGRlZE5vZGVQYXRocyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBtZXRhZGF0YT8ucGFnZXM/LmZsYXRNYXAoKGl0ZW0pID0+IHtcbiAgICAgIHJldHVybiByZXNvbHZlRm9sZGVySXRlbShmb2xkZXIsIGl0ZW0sIGN0eCwgYWRkZWROb2RlUGF0aHMpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3ROb2RlcyA9IGJ1aWxkQWxsKFxuICAgICAgZm9sZGVyLmNoaWxkcmVuLmZpbHRlcigobm9kZTIpID0+ICFhZGRlZE5vZGVQYXRocy5oYXMobm9kZTIuZmlsZS5wYXRoKSksXG4gICAgICBjdHgsXG4gICAgICAhaXNSb290XG4gICAgKTtcbiAgICBjb25zdCBub2RlcyA9IHJlc29sdmVkPy5mbGF0TWFwKChpdGVtKSA9PiB7XG4gICAgICBpZiAoaXRlbSA9PT0gXCIuLi5cIikge1xuICAgICAgICByZXR1cm4gcmVzdE5vZGVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG4gICAgY2hpbGRyZW4gPSBub2RlcyA/PyByZXN0Tm9kZXM7XG4gIH1cbiAgY29uc3Qgbm9kZSA9IHtcbiAgICB0eXBlOiBcImZvbGRlclwiLFxuICAgIG5hbWU6IG1ldGFkYXRhPy50aXRsZSA/PyBpbmRleD8ubmFtZSA/PyBwYXRoVG9OYW1lKGZvbGRlci5maWxlLm5hbWUsIHRydWUpLFxuICAgIGljb246IGN0eC5vcHRpb25zLnJlc29sdmVJY29uPy4obWV0YWRhdGE/Lmljb24pID8/IGluZGV4Py5pY29uLFxuICAgIHJvb3Q6IG1ldGFkYXRhPy5yb290LFxuICAgIGRlZmF1bHRPcGVuOiBtZXRhZGF0YT8uZGVmYXVsdE9wZW4sXG4gICAgaW5kZXgsXG4gICAgY2hpbGRyZW5cbiAgfTtcbiAgaWYgKGN0eC5vcHRpb25zLmF0dGFjaEZvbGRlcklkcykge1xuICAgIG5vZGUuaWQgPSBmb2xkZXIuZmlsZS5mbGF0dGVuZWRQYXRoO1xuICB9XG4gIHJldHVybiByZW1vdmVVbmRlZmluZWQoXG4gICAgY3R4Lm9wdGlvbnMuYXR0YWNoRm9sZGVyPy4obm9kZSwgZm9sZGVyLCBtZXRhKSA/PyBub2RlXG4gICk7XG59XG5mdW5jdGlvbiBidWlsZEZpbGVOb2RlKGZpbGUsIGN0eCkge1xuICBsZXQgdXJsTG9jYWxlO1xuICBjb25zdCBsb2NhbGl6ZWQgPSBmaW5kTG9jYWxpemVkRmlsZShmaWxlLmZpbGUuZmxhdHRlbmVkUGF0aCwgXCJwYWdlXCIsIGN0eCkgPz8gZmlsZTtcbiAgY29uc3QgaGlkZUxvY2FsZSA9IGN0eC5pMThuPy5oaWRlTG9jYWxlID8/IFwibmV2ZXJcIjtcbiAgaWYgKGhpZGVMb2NhbGUgPT09IFwibmV2ZXJcIikge1xuICAgIHVybExvY2FsZSA9IGN0eC5sYW5nO1xuICB9IGVsc2UgaWYgKGhpZGVMb2NhbGUgPT09IFwiZGVmYXVsdC1sb2NhbGVcIiAmJiBjdHgubGFuZyAhPT0gY3R4LmkxOG4/LmRlZmF1bHRMYW5ndWFnZSkge1xuICAgIHVybExvY2FsZSA9IGN0eC5sYW5nO1xuICB9XG4gIGNvbnN0IGl0ZW0gPSB7XG4gICAgdHlwZTogXCJwYWdlXCIsXG4gICAgbmFtZTogbG9jYWxpemVkLmRhdGEuZGF0YS50aXRsZSxcbiAgICBpY29uOiBjdHgub3B0aW9ucy5yZXNvbHZlSWNvbj8uKGxvY2FsaXplZC5kYXRhLmRhdGEuaWNvbiksXG4gICAgdXJsOiBjdHgub3B0aW9ucy5nZXRVcmwobG9jYWxpemVkLmRhdGEuc2x1Z3MsIHVybExvY2FsZSlcbiAgfTtcbiAgcmV0dXJuIHJlbW92ZVVuZGVmaW5lZChjdHgub3B0aW9ucy5hdHRhY2hGaWxlPy4oaXRlbSwgZmlsZSkgPz8gaXRlbSk7XG59XG5mdW5jdGlvbiBidWlsZChjdHgpIHtcbiAgY29uc3Qgcm9vdCA9IGN0eC5zdG9yYWdlLnJvb3QoKTtcbiAgY29uc3QgZm9sZGVyID0gYnVpbGRGb2xkZXJOb2RlKHJvb3QsIHRydWUsIGN0eCk7XG4gIHJldHVybiB7XG4gICAgbmFtZTogZm9sZGVyLm5hbWUsXG4gICAgY2hpbGRyZW46IGZvbGRlci5jaGlsZHJlblxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUGFnZVRyZWVCdWlsZGVyKCkge1xuICByZXR1cm4ge1xuICAgIGJ1aWxkKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBidWlsZCh7XG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGJ1aWxkZXI6IHRoaXMsXG4gICAgICAgIHN0b3JhZ2U6IG9wdGlvbnMuc3RvcmFnZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBidWlsZEkxOG4oeyBpMThuLCAuLi5vcHRpb25zIH0pIHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBpMThuLmxhbmd1YWdlcy5tYXAoKGxhbmcpID0+IHtcbiAgICAgICAgY29uc3QgdHJlZSA9IGJ1aWxkKHtcbiAgICAgICAgICBsYW5nLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgYnVpbGRlcjogdGhpcyxcbiAgICAgICAgICBzdG9yYWdlOiBvcHRpb25zLnN0b3JhZ2UsXG4gICAgICAgICAgaTE4blxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtsYW5nLCB0cmVlXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhlbnRyaWVzKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBmaW5kTG9jYWxpemVkRmlsZShwYXRoLCBmb3JtYXQsIGN0eCkge1xuICBpZiAoIWN0eC5sYW5nKSByZXR1cm47XG4gIHJldHVybiBjdHguc3RvcmFnZS5yZWFkKGAke3BhdGh9LiR7Y3R4Lmxhbmd9YCwgZm9ybWF0KTtcbn1cbmZ1bmN0aW9uIHBhdGhUb05hbWUobmFtZSwgcmVzb2x2ZUdyb3VwID0gZmFsc2UpIHtcbiAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlR3JvdXAgPyBncm91cC5leGVjKG5hbWUpPy5bMV0gPz8gbmFtZSA6IG5hbWU7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IGMgb2YgcmVzb2x2ZWQpIHtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkgcmVzdWx0LnB1c2goYy50b0xvY2FsZVVwcGVyQ2FzZSgpKTtcbiAgICBlbHNlIGlmIChjID09PSBcIi1cIikgcmVzdWx0LnB1c2goXCIgXCIpO1xuICAgIGVsc2UgcmVzdWx0LnB1c2goYyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xufVxuZnVuY3Rpb24gcmVtb3ZlVW5kZWZpbmVkKHZhbHVlKSB7XG4gIGNvbnN0IG9iaiA9IHZhbHVlO1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmIChvYmpba2V5XSA9PT0gdm9pZCAwKSBkZWxldGUgb2JqW2tleV07XG4gIH0pO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIHNyYy9zb3VyY2UvZmlsZS1zeXN0ZW0udHNcbnZhciBmaWxlX3N5c3RlbV9leHBvcnRzID0ge307XG5fX2V4cG9ydChmaWxlX3N5c3RlbV9leHBvcnRzLCB7XG4gIFN0b3JhZ2U6ICgpID0+IFN0b3JhZ2Vcbn0pO1xudmFyIFN0b3JhZ2UgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZmlsZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgIHRoaXMuZm9sZGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gICAgdGhpcy5yb290Rm9sZGVyID0ge1xuICAgICAgZmlsZTogcGFyc2VGb2xkZXJQYXRoKFwiXCIpLFxuICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcbiAgICB0aGlzLmZvbGRlcnMuc2V0KFwiXCIsIHRoaXMucm9vdEZvbGRlcik7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBwYXRoIC0gZmxhdHRlbmVkIHBhdGhcbiAgICogQHBhcmFtIGZvcm1hdCAtIGZpbGUgZm9ybWF0XG4gICAqL1xuICByZWFkKHBhdGgsIGZvcm1hdCkge1xuICAgIHJldHVybiB0aGlzLmZpbGVzLmdldChgJHtwYXRofS4ke2Zvcm1hdH1gKTtcbiAgfVxuICByZWFkRGlyKHBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy5mb2xkZXJzLmdldChwYXRoKTtcbiAgfVxuICByb290KCkge1xuICAgIHJldHVybiB0aGlzLnJvb3RGb2xkZXI7XG4gIH1cbiAgd3JpdGUocGF0aCwgZm9ybWF0LCBkYXRhKSB7XG4gICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgIGZvcm1hdCxcbiAgICAgIGZpbGU6IHBhcnNlRmlsZVBhdGgocGF0aCksXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICB0aGlzLm1ha2VEaXIobm9kZS5maWxlLmRpcm5hbWUpO1xuICAgIHRoaXMucmVhZERpcihub2RlLmZpbGUuZGlybmFtZSk/LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgdGhpcy5maWxlcy5zZXQoYCR7bm9kZS5maWxlLmZsYXR0ZW5lZFBhdGh9LiR7bm9kZS5mb3JtYXR9YCwgbm9kZSk7XG4gIH1cbiAgbGlzdCgpIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuZmlsZXMudmFsdWVzKCldO1xuICB9XG4gIG1ha2VEaXIocGF0aCkge1xuICAgIGNvbnN0IHNlZ21lbnRzID0gc3BsaXRQYXRoKHBhdGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50cy5zbGljZSgwLCBpICsgMSkuam9pbihcIi9cIik7XG4gICAgICBpZiAodGhpcy5mb2xkZXJzLmhhcyhzZWdtZW50KSkgY29udGludWU7XG4gICAgICBjb25zdCBmb2xkZXIgPSB7XG4gICAgICAgIGZpbGU6IHBhcnNlRm9sZGVyUGF0aChzZWdtZW50KSxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICB9O1xuICAgICAgdGhpcy5mb2xkZXJzLnNldChmb2xkZXIuZmlsZS5wYXRoLCBmb2xkZXIpO1xuICAgICAgdGhpcy5yZWFkRGlyKGZvbGRlci5maWxlLmRpcm5hbWUpPy5jaGlsZHJlbi5wdXNoKGZvbGRlcik7XG4gICAgfVxuICB9XG59O1xuXG4vLyBzcmMvc291cmNlL2xvYWQtZmlsZXMudHNcbmZ1bmN0aW9uIGxvYWRGaWxlcyhmaWxlcywgb3B0aW9ucykge1xuICBjb25zdCB7IHRyYW5zZm9ybWVycyA9IFtdIH0gPSBvcHRpb25zO1xuICBjb25zdCBzdG9yYWdlID0gbmV3IFN0b3JhZ2UoKTtcbiAgY29uc3Qgcm9vdERpciA9IG5vcm1hbGl6ZVBhdGgob3B0aW9ucy5yb290RGlyID8/IFwiXCIpO1xuICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICBjb25zdCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVBhdGgoZmlsZS5wYXRoKTtcbiAgICBpZiAoIW5vcm1hbGl6ZWRQYXRoLnN0YXJ0c1dpdGgocm9vdERpcikpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHJlbGF0aXZlUGF0aCA9IG5vcm1hbGl6ZWRQYXRoLnNsaWNlKHJvb3REaXIubGVuZ3RoKTtcbiAgICBpZiAoZmlsZS50eXBlID09PSBcInBhZ2VcIikge1xuICAgICAgY29uc3Qgc2x1Z3MgPSBmaWxlLnNsdWdzID8/IG9wdGlvbnMuZ2V0U2x1Z3MocGFyc2VGaWxlUGF0aChyZWxhdGl2ZVBhdGgpKTtcbiAgICAgIHN0b3JhZ2Uud3JpdGUocmVsYXRpdmVQYXRoLCBmaWxlLnR5cGUsIHtcbiAgICAgICAgc2x1Z3MsXG4gICAgICAgIGRhdGE6IGZpbGUuZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChmaWxlLnR5cGUgPT09IFwibWV0YVwiKSB7XG4gICAgICBzdG9yYWdlLndyaXRlKHJlbGF0aXZlUGF0aCwgZmlsZS50eXBlLCB7XG4gICAgICAgIGRhdGE6IGZpbGUuZGF0YVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgdHJhbnNmb3JtZXIgb2YgdHJhbnNmb3JtZXJzKSB7XG4gICAgdHJhbnNmb3JtZXIoe1xuICAgICAgc3RvcmFnZSxcbiAgICAgIG9wdGlvbnNcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RvcmFnZTtcbn1cblxuLy8gc3JjL3NvdXJjZS9sb2FkZXIudHNcbmZ1bmN0aW9uIGJ1aWxkUGFnZU1hcChzdG9yYWdlLCBnZXRVcmwsIGxhbmd1YWdlcyA9IFtdKSB7XG4gIGNvbnN0IG1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IGRlZmF1bHRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBtYXAuc2V0KFwiXCIsIGRlZmF1bHRNYXApO1xuICBmb3IgKGNvbnN0IGZpbGUgb2Ygc3RvcmFnZS5saXN0KCkpIHtcbiAgICBpZiAoZmlsZS5mb3JtYXQgIT09IFwicGFnZVwiIHx8IGZpbGUuZmlsZS5sb2NhbGUpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHBhZ2UgPSBmaWxlVG9QYWdlKGZpbGUsIGdldFVybCk7XG4gICAgZGVmYXVsdE1hcC5zZXQocGFnZS5zbHVncy5qb2luKFwiL1wiKSwgcGFnZSk7XG4gICAgZm9yIChjb25zdCBsYW5nIG9mIGxhbmd1YWdlcykge1xuICAgICAgY29uc3QgbGFuZ01hcCA9IG1hcC5nZXQobGFuZykgPz8gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgICAgIGNvbnN0IGxvY2FsaXplZCA9IHN0b3JhZ2UucmVhZChcbiAgICAgICAgYCR7ZmlsZS5maWxlLmZsYXR0ZW5lZFBhdGh9LiR7bGFuZ31gLFxuICAgICAgICBcInBhZ2VcIlxuICAgICAgKTtcbiAgICAgIGNvbnN0IGxvY2FsaXplZFBhZ2UgPSBmaWxlVG9QYWdlKGxvY2FsaXplZCA/PyBmaWxlLCBnZXRVcmwsIGxhbmcpO1xuICAgICAgbGFuZ01hcC5zZXQobG9jYWxpemVkUGFnZS5zbHVncy5qb2luKFwiL1wiKSwgbG9jYWxpemVkUGFnZSk7XG4gICAgICBtYXAuc2V0KGxhbmcsIGxhbmdNYXApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWFwO1xufVxuZnVuY3Rpb24gY3JlYXRlR2V0VXJsKGJhc2VVcmwpIHtcbiAgcmV0dXJuIChzbHVncywgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgcGF0aHMgPSBsb2NhbGUgPyBbbG9jYWxlLCAuLi5iYXNlVXJsLnNwbGl0KFwiL1wiKSwgLi4uc2x1Z3NdIDogWy4uLmJhc2VVcmwuc3BsaXQoXCIvXCIpLCAuLi5zbHVnc107XG4gICAgcmV0dXJuIGAvJHtwYXRocy5maWx0ZXIoKHYpID0+IHYubGVuZ3RoID4gMCkuam9pbihcIi9cIil9YDtcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFNsdWdzKGluZm8pIHtcbiAgcmV0dXJuIFsuLi5pbmZvLmRpcm5hbWUuc3BsaXQoXCIvXCIpLCBpbmZvLm5hbWVdLmZpbHRlcihcbiAgICAvLyBmaWx0ZXIgZW1wdHkgZm9sZGVyIG5hbWVzIGFuZCBmaWxlIGdyb3VwcyBsaWtlIChncm91cF9uYW1lKVxuICAgICh2LCBpLCBhcnIpID0+IHtcbiAgICAgIGlmICh2Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIGkgPT09IGFyci5sZW5ndGggLSAxID8gdiAhPT0gXCJpbmRleFwiIDogIS9eXFwoLitcXCkkLy50ZXN0KHYpO1xuICAgIH1cbiAgKTtcbn1cbmZ1bmN0aW9uIGxvYWRlcihvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmxhbmd1YWdlcykge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiRnVtYWRvY3M6IEl0J3MgaGlnaGx5IHJlY29tbWVuZGVkIHRvIHVzZSBgaTE4bmAgY29uZmlnIGluc3RlYWQgb2YgcGFzc2luZyBgbGFuZ3VhZ2VzYCB0byBsb2FkZXIuXCJcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVPdXRwdXQoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGkxOG46IHtcbiAgICAgICAgbGFuZ3VhZ2VzOiBvcHRpb25zLmxhbmd1YWdlcyxcbiAgICAgICAgZGVmYXVsdExhbmd1YWdlOiBvcHRpb25zLmRlZmF1bHRMYW5ndWFnZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVPdXRwdXQob3B0aW9ucyk7XG59XG5mdW5jdGlvbiBjcmVhdGVPdXRwdXQoe1xuICBzb3VyY2UsXG4gIGljb246IHJlc29sdmVJY29uLFxuICByb290RGlyID0gXCJcIixcbiAgdHJhbnNmb3JtZXJzLFxuICBiYXNlVXJsID0gXCIvXCIsXG4gIHNsdWdzOiBzbHVnc0ZuID0gZ2V0U2x1Z3MsXG4gIHVybDogZ2V0VXJsID0gY3JlYXRlR2V0VXJsKGJhc2VVcmwpLFxuICBwYWdlVHJlZTogcGFnZVRyZWVPcHRpb25zID0ge30sXG4gIGkxOG5cbn0pIHtcbiAgY29uc3Qgc3RvcmFnZSA9IGxvYWRGaWxlcyhcbiAgICB0eXBlb2Ygc291cmNlLmZpbGVzID09PSBcImZ1bmN0aW9uXCIgPyBzb3VyY2UuZmlsZXMocm9vdERpcikgOiBzb3VyY2UuZmlsZXMsXG4gICAge1xuICAgICAgdHJhbnNmb3JtZXJzLFxuICAgICAgcm9vdERpcixcbiAgICAgIGdldFNsdWdzOiBzbHVnc0ZuXG4gICAgfVxuICApO1xuICBjb25zdCBpMThuTWFwID0gYnVpbGRQYWdlTWFwKHN0b3JhZ2UsIGdldFVybCwgaTE4bj8ubGFuZ3VhZ2VzKTtcbiAgY29uc3QgYnVpbGRlciA9IGNyZWF0ZVBhZ2VUcmVlQnVpbGRlcigpO1xuICBjb25zdCBwYWdlVHJlZSA9IGkxOG4gPT09IHZvaWQgMCA/IGJ1aWxkZXIuYnVpbGQoe1xuICAgIHN0b3JhZ2UsXG4gICAgcmVzb2x2ZUljb24sXG4gICAgZ2V0VXJsLFxuICAgIC4uLnBhZ2VUcmVlT3B0aW9uc1xuICB9KSA6IGJ1aWxkZXIuYnVpbGRJMThuKHtcbiAgICBzdG9yYWdlLFxuICAgIHJlc29sdmVJY29uLFxuICAgIGdldFVybCxcbiAgICBpMThuLFxuICAgIC4uLnBhZ2VUcmVlT3B0aW9uc1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwYWdlVHJlZSxcbiAgICBmaWxlczogc3RvcmFnZS5saXN0KCksXG4gICAgZ2V0UGFnZXMobGFuZ3VhZ2UgPSBpMThuPy5kZWZhdWx0TGFuZ3VhZ2UgPz8gXCJcIikge1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20oaTE4bk1hcC5nZXQobGFuZ3VhZ2UpPy52YWx1ZXMoKSA/PyBbXSk7XG4gICAgfSxcbiAgICBnZXRMYW5ndWFnZXMoKSB7XG4gICAgICBjb25zdCBsaXN0ID0gW107XG4gICAgICBmb3IgKGNvbnN0IFtsYW5ndWFnZSwgcGFnZXNdIG9mIGkxOG5NYXApIHtcbiAgICAgICAgaWYgKGxhbmd1YWdlID09PSBcIlwiKSBjb250aW51ZTtcbiAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgICBwYWdlczogQXJyYXkuZnJvbShwYWdlcy52YWx1ZXMoKSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9LFxuICAgIGdldFBhZ2Uoc2x1Z3MgPSBbXSwgbGFuZ3VhZ2UgPSBpMThuPy5kZWZhdWx0TGFuZ3VhZ2UgPz8gXCJcIikge1xuICAgICAgcmV0dXJuIGkxOG5NYXAuZ2V0KGxhbmd1YWdlKT8uZ2V0KHNsdWdzLmpvaW4oXCIvXCIpKTtcbiAgICB9LFxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLS0gaWdub3JlIHRoaXNcbiAgICBnZW5lcmF0ZVBhcmFtcyhzbHVnLCBsYW5nKSB7XG4gICAgICBpZiAoaTE4bikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYW5ndWFnZXMoKS5mbGF0TWFwKFxuICAgICAgICAgIChlbnRyeSkgPT4gZW50cnkucGFnZXMubWFwKChwYWdlKSA9PiAoe1xuICAgICAgICAgICAgW3NsdWcgPz8gXCJzbHVnXCJdOiBwYWdlLnNsdWdzLFxuICAgICAgICAgICAgW2xhbmcgPz8gXCJsYW5nXCJdOiBlbnRyeS5sYW5ndWFnZVxuICAgICAgICAgIH0pKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LmZyb20oaTE4bk1hcC5nZXQoXCJcIik/LnZhbHVlcygpID8/IFtdKS5tYXAoKHBhZ2UpID0+ICh7XG4gICAgICAgIFtzbHVnID8/IFwic2x1Z1wiXTogcGFnZS5zbHVnc1xuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGZpbGVUb1BhZ2UoZmlsZSwgZ2V0VXJsLCBsb2NhbGUpIHtcbiAgcmV0dXJuIHtcbiAgICBmaWxlOiBmaWxlLmZpbGUsXG4gICAgdXJsOiBnZXRVcmwoZmlsZS5kYXRhLnNsdWdzLCBsb2NhbGUpLFxuICAgIHNsdWdzOiBmaWxlLmRhdGEuc2x1Z3MsXG4gICAgZGF0YTogZmlsZS5kYXRhLmRhdGFcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGZpbGVfc3lzdGVtX2V4cG9ydHMgYXMgRmlsZVN5c3RlbSxcbiAgY3JlYXRlR2V0VXJsLFxuICBjcmVhdGVQYWdlVHJlZUJ1aWxkZXIsXG4gIGdldFNsdWdzLFxuICBsb2FkRmlsZXMsXG4gIGxvYWRlcixcbiAgcGFyc2VGaWxlUGF0aCxcbiAgcGFyc2VGb2xkZXJQYXRoXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fumadocs-core/dist/source/index.js\n");

/***/ })

};
;